#!/usr/bin/env python
# usage:
#   bin/merge-from-salesforce [salesforce report csv] [organizations.json]
#
# where salesforce report CSV is downloaded from:
# https://na52.lightning.force.com/one/one.app#/sObject/00O0W000005bkqeUAA/view
#
# Requires Python 3.
from geopy import geocoders


import csv
import json
import re
import sys
from collections import OrderedDict

# Ignore updating these fields, since they are not represented properly in
# Salesforce.
SKIP_UPDATE_FIELDS = {
    'Code for Philly': ['projects_list_url'],
    'Open Oakland': ['projects_list_url'],
    'Open Seattle': ['projects_list_url'],
    'Code for Upper Valley': ['events_url'],
    'Code for Milwaukee': ['projects_list_url'],
}

# Do a HTTP/HTTPS-insensitive comparison for determining if two URLs are
# identical.
def are_urls_equal(url, other):
    if isinstance(url, str) and not other:
        return False
    if isinstance(other, str) and not url:
        return False

    return re.sub(r'^https?://', '', url) == re.sub(r'^https?://', '', other)


def is_official_brigade(brigade):
    return 'tags' in brigade and \
            'Brigade' in brigade['tags'] and \
            'Official' in brigade['tags'] and \
            'Code for America' in brigade['tags']

def load_organizations(filename):
    with open(filename) as f:
        contents = json.load(f, object_pairs_hook=OrderedDict)
        return contents


def dump_organizations(organizations, filename):
    output = json.dumps(organizations, indent=4, ensure_ascii=False)
    output = re.sub(r'[\s]+$', '', output, flags=re.MULTILINE)

    with open(filename, 'wb') as f:
        f.write(output.encode('utf8'))


def load_report(filename):
    with open(filename) as f:
        # _ = f.readline() # "Last Updated" row

        reader = csv.DictReader(f)
        return [row for row in reader]


def find_updated_brigades(existing, salesforce):
    ''' finds brigades whose attributes need to be updated '''
    updated_brigades = []

    for existing_brigade in existing:
        salesforce_brigade = next(iter(b for b in salesforce if b['Account Name'] == existing_brigade['name']), None)

        # if not in salesforce, they'll be removed by the find_extra_brigades step
        if not salesforce_brigade:
            continue

        brigade_name = salesforce_brigade['Account Name']
        brigade_idx = next(i for i, b in enumerate(existing) if brigade_name == b['name'])
        existing_brigade = existing[brigade_idx]

        # update tags (and depcerated type) attribute
        tags = official_brigade_tags(salesforce_brigade)
        if update_json_attribute(existing_brigade, 'tags', tags):
            updated_brigades.append(existing_brigade)
            update_json_attribute(existing_brigade, 'type', ", ".join(tags))
            assert is_official_brigade(existing_brigade)

        # update city and lat/long if necessary
        if update_json_attribute(existing_brigade, 'city', salesforce_brigade['Brigade Location']):
            updated_brigades.append(existing_brigade)
            geo = geocoders.Nominatim(user_agent="Code for America/0.1")
            result = geo.geocode(existing_brigade['city'])
            update_json_attribute(existing_brigade, 'latitude', str(result.latitude))
            update_json_attribute(existing_brigade, 'longitude', str(result.longitude))

        social_profiles = existing_brigade.get('social_profiles', {})
        if 'Facebook Page URL' in salesforce_brigade and len(salesforce_brigade['Facebook Page URL']):
            social_profiles['facebook'] = salesforce_brigade['Facebook Page URL']
        if 'Organization Twitter' in social_profiles and len(salesforce_brigade['Organization Twitter']):
            social_profiles['twitter'] = salesforce_brigade['Organization Twitter']

        # update the other attributes
        if any([
            update_json_attribute(existing_brigade, 'events_url', salesforce_brigade['MeetUp Link']),
            update_json_attribute(existing_brigade, 'website', salesforce_brigade['Website']),
            update_json_attribute(existing_brigade, 'projects_list_url', salesforce_brigade['Github URL']),
            update_json_attribute(existing_brigade, 'social_profiles', social_profiles),
        ]):
            updated_brigades.append(existing_brigade)

    return updated_brigades


def find_missing_brigades(existing, salesforce):
    ''' finds brigades which are in salesforce, but not brigade-information '''
    official_names = [b['name'] for b in existing]
    missing = [b for b in salesforce if b['Account Name'] not in official_names]
    return missing


def find_extra_brigades(existing, salesforce):
    ''' finds brigades which are in brigade-information, but not salesforce '''
    official = list(filter(is_official_brigade, existing))
    salesforce_names = [b['Account Name'] for b in salesforce]
    extra = [b for b in official if b['name'] not in salesforce_names]
    return extra


def find_renamed_brigades(missing_brigades, existing):
    ''' finds renamed brigades, the old name will appear as extra and the new name as missing '''
    # set containing tuples of (old name, new name)
    renamed_brigades = set()

    for missing in missing_brigades:
        for extra in existing:
            if missing['Website'] and 'website' in extra and are_urls_equal(missing['Website'], extra['website']):
                renamed_brigades.add((extra['name'], missing['Account Name']))

            if missing['MeetUp Link'] and 'events_url' in extra and are_urls_equal(missing['MeetUp Link'], extra['events_url']):
                renamed_brigades.add((extra['name'], missing['Account Name']))

            if missing['Github URL'] and 'projects_list_url' in extra and are_urls_equal(missing['Github URL'], extra['projects_list_url']):
                renamed_brigades.add((extra['name'], missing['Account Name']))

    return list(renamed_brigades)

def remove_brigade(brigade_name, existing, full_removal=False):
    try:
        remove_idx = next(i for i, b in enumerate(existing) if brigade_name == b['name'])

        if full_removal:
            del existing[remove_idx]
        else:
            existing[remove_idx]['tags'].remove('Official')
            existing[remove_idx]['tags'].remove('Code for America')
            if 'Code for America Partner Brigade' in existing[remove_idx]['tags']:
                existing[remove_idx]['tags'].remove('Code for America Partner Brigade')
            if 'Code for America Fiscally Sponsored Brigade' in existing[remove_idx]['tags']:
                existing[remove_idx]['tags'].remove('Code for America Fiscally Sponsored Brigade')
            existing[remove_idx]['type'] = ", ".join(existing[remove_idx]['tags'])
    except StopIteration:
        print("Could not remove brigade {}".format(brigade_name))

def add_brigade(existing, name=None, events_url=None, city=None, website=None, projects_list_url=None, facebook=None, twitter=None, previous_names=[]):
    # attempt to add the brigade in a place where it is sorted lexicographically
    next_idx = next(i for i, b in enumerate(existing) if name < b['name'])

    latitude = None
    longitude = None

    if city:
        geo = geocoders.Nominatim(user_agent="Code for America/0.1")
        result = geo.geocode(city)
        latitude = str(result.latitude)
        longitude = str(result.longitude)

    social_profiles = {}
    if facebook:
        social_profiles['facebook'] = facebook
    if twitter:
        social_profiles['twitter'] = twitter

    default_tags = ['Official', 'Brigade', 'Code for America']
    default_tags.sort()

    existing.insert(next_idx, OrderedDict([
        ('name', name),
        ('website', website),
        ('city', city),
        ('latitude', latitude),
        ('longitude', longitude),
        ('events_url', events_url),
        ('previous_names', previous_names),
        ('projects_list_url', projects_list_url),
        ('tags', default_tags),
        ('social_profiles', social_profiles),
    ]))

def rename_brigade(old_brigade_name, new_brigade_name, existing, salesforce):
    old_brigade = next(iter([b for b in existing if b['name'] == old_brigade_name]), None)
    new_brigade = next(iter([b for b in salesforce if b['Account Name'] == new_brigade_name]), None)
    previous_names = old_brigade.get('previous_names', [])
    previous_names.append(old_brigade_name)

    remove_brigade(old_brigade_name, existing, full_removal=True)
    add_brigade(existing, name=new_brigade['Account Name'],
            events_url=new_brigade['MeetUp Link'],
            city=new_brigade['Brigade Location'],
            website=new_brigade['Website'],
            twitter=new_brigade['Organization Twitter'],
            facebook=new_brigade['Facebook Page URL'],
            projects_list_url=new_brigade['Github URL'],
            previous_names=previous_names)


def official_brigade_tags(salesforce_brigade):
    ''' provided an official brigade from salesforce, returns the list of tags for it '''
    tags = []
    tags.append('Brigade')
    tags.append('Official')
    tags.append('Code for America')
    if salesforce_brigade['Brigade Type'] == 'Fiscally Sponsored Brigade':
        tags.append('Code for America Fiscally Sponsored Brigade')
    if salesforce_brigade['Brigade Type'] == 'Partner':
        tags.append('Code for America Partner Brigade')
    tags.sort()
    return tags


def update_json_attribute(existing_brigade, attribute, value):
    '''
    sets attribute to the value for a brigade, and returns True/False depending
    on if the attribute was modified
    '''
    if attribute in SKIP_UPDATE_FIELDS.get(existing_brigade['name'], []):
        return False

    if existing_brigade.get(attribute) == value:
        return False

    if isinstance(value, str) and re.match(r'^https?://', value) and are_urls_equal(existing_brigade.get(attribute), value):
            return False

    existing_brigade[attribute] = value
    return True


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Usage: bin/merge-from-salesforce [salesforce report csv] [organizations.json]")
        sys.exit(1)

    salesforce_path = sys.argv[1]
    organizations_json_path = sys.argv[2]

    existing = load_organizations(organizations_json_path)
    salesforce = load_report(salesforce_path)

    # Find possibly-missing and possibly-extra brigades, since typically a
    # Brigade rename will appear as a deletion and addition.
    missing_brigades = find_missing_brigades(existing, salesforce)
    print("Found {} Missing Brigades:".format(len(missing_brigades)))
    print(", ".join([b['Account Name'] for b in missing_brigades]))
    extra_brigades = find_extra_brigades(existing, salesforce)
    print("Found {} Extra Brigades:".format(len(extra_brigades)))
    print(", ".join([b['name'] for b in extra_brigades]))
    updated_brigades = find_updated_brigades(existing, salesforce)
    print("Updated {} Brigades:".format(len(updated_brigades)))
    print(", ".join([b['name'] for b in updated_brigades]))

    print("")
    print("Renamed Brigades:")
    for (old_brigade_name, new_brigade_name) in find_renamed_brigades(missing_brigades, existing):
        print("{} -> {}".format(old_brigade_name, new_brigade_name))
        rename_brigade(old_brigade_name, new_brigade_name, existing, salesforce)
        del missing_brigades[next(i for i, b in enumerate(missing_brigades) if new_brigade_name == b['Account Name'])]

        extra_brigade_idx = next((i for i, b in enumerate(extra_brigades) if old_brigade_name == b['name']), None)
        if extra_brigade_idx:
            del extra_brigades[extra_brigade_idx]

    print("")
    print("Missing Brigades to Add:")
    for missing_brigade in missing_brigades:
        print(missing_brigade['Account Name'])
        add_brigade(existing, name=missing_brigade['Account Name'],
                events_url=missing_brigade['MeetUp Link'],
                city=missing_brigade['Brigade Location'],
                website=missing_brigade['Website'],
                twitter=missing_brigade['Organization Twitter'],
                facebook=missing_brigade['Facebook Page URL'],
                projects_list_url=missing_brigade['Github URL'])

    print('')
    print("Extra Brigades To Remove:")
    for extra_brigade in extra_brigades:
        print(extra_brigade['name'])
        remove_brigade(extra_brigade['name'], existing)

    dump_organizations(existing, organizations_json_path)
